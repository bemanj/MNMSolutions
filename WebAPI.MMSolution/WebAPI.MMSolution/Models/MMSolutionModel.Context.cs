//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WebAPI.MMSolution.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class MNMSolutionsDevDBEntities : DbContext
    {
        public MNMSolutionsDevDBEntities()
            : base("name=MNMSolutionsDevDBEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<SalesOrderDetail> SalesOrderDetails { get; set; }
        public virtual DbSet<SalesOrderHeader> SalesOrderHeaders { get; set; }
        public virtual DbSet<OrderDetail> OrderDetails { get; set; }
    
        public virtual int usp_OrderDetail_Insert(Nullable<int> orderID, Nullable<int> productID, Nullable<decimal> unitPrice, Nullable<short> quantity, Nullable<float> discount, Nullable<decimal> totalAmount)
        {
            var orderIDParameter = orderID.HasValue ?
                new ObjectParameter("OrderID", orderID) :
                new ObjectParameter("OrderID", typeof(int));
    
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            var unitPriceParameter = unitPrice.HasValue ?
                new ObjectParameter("UnitPrice", unitPrice) :
                new ObjectParameter("UnitPrice", typeof(decimal));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(short));
    
            var discountParameter = discount.HasValue ?
                new ObjectParameter("Discount", discount) :
                new ObjectParameter("Discount", typeof(float));
    
            var totalAmountParameter = totalAmount.HasValue ?
                new ObjectParameter("TotalAmount", totalAmount) :
                new ObjectParameter("TotalAmount", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_OrderDetail_Insert", orderIDParameter, productIDParameter, unitPriceParameter, quantityParameter, discountParameter, totalAmountParameter);
        }
    
        public virtual int usp_OrderDetail_Update(Nullable<int> orderID, Nullable<int> productID, Nullable<decimal> unitPrice, Nullable<short> quantity, Nullable<float> discount, Nullable<decimal> totalAmount)
        {
            var orderIDParameter = orderID.HasValue ?
                new ObjectParameter("OrderID", orderID) :
                new ObjectParameter("OrderID", typeof(int));
    
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            var unitPriceParameter = unitPrice.HasValue ?
                new ObjectParameter("UnitPrice", unitPrice) :
                new ObjectParameter("UnitPrice", typeof(decimal));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(short));
    
            var discountParameter = discount.HasValue ?
                new ObjectParameter("Discount", discount) :
                new ObjectParameter("Discount", typeof(float));
    
            var totalAmountParameter = totalAmount.HasValue ?
                new ObjectParameter("TotalAmount", totalAmount) :
                new ObjectParameter("TotalAmount", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_OrderDetail_Update", orderIDParameter, productIDParameter, unitPriceParameter, quantityParameter, discountParameter, totalAmountParameter);
        }
    
        public virtual int usp_OrderDetail_Delete(Nullable<int> orderID, Nullable<int> productID)
        {
            var orderIDParameter = orderID.HasValue ?
                new ObjectParameter("OrderID", orderID) :
                new ObjectParameter("OrderID", typeof(int));
    
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_OrderDetail_Delete", orderIDParameter, productIDParameter);
        }
    
        public virtual ObjectResult<usp_OrderDetail_GetOrderDetail_Result> GetOrderDetailBy_OrderID_ProductID(Nullable<int> orderID, Nullable<int> productID)
        {
            var orderIDParameter = orderID.HasValue ?
                new ObjectParameter("OrderID", orderID) :
                new ObjectParameter("OrderID", typeof(int));
    
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_OrderDetail_GetOrderDetail_Result>("GetOrderDetailBy_OrderID_ProductID", orderIDParameter, productIDParameter);
        }
    
        public virtual int usp_SOD_Delete(Nullable<int> salesDetailsID)
        {
            var salesDetailsIDParameter = salesDetailsID.HasValue ?
                new ObjectParameter("SalesDetailsID", salesDetailsID) :
                new ObjectParameter("SalesDetailsID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_SOD_Delete", salesDetailsIDParameter);
        }
    
        public virtual ObjectResult<usp_SOD_GetBySID_Result> GetSODetailsByID(Nullable<int> salesDetailsID)
        {
            var salesDetailsIDParameter = salesDetailsID.HasValue ?
                new ObjectParameter("SalesDetailsID", salesDetailsID) :
                new ObjectParameter("SalesDetailsID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_SOD_GetBySID_Result>("GetSODetailsByID", salesDetailsIDParameter);
        }
    
        public virtual int usp_SOD_Insert(Nullable<int> salesOrderID, Nullable<int> stockID, Nullable<int> productID, Nullable<decimal> unitPrice, string article, string uOM, Nullable<short> quantity, Nullable<float> discount, Nullable<decimal> totalAmount)
        {
            var salesOrderIDParameter = salesOrderID.HasValue ?
                new ObjectParameter("SalesOrderID", salesOrderID) :
                new ObjectParameter("SalesOrderID", typeof(int));
    
            var stockIDParameter = stockID.HasValue ?
                new ObjectParameter("StockID", stockID) :
                new ObjectParameter("StockID", typeof(int));
    
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            var unitPriceParameter = unitPrice.HasValue ?
                new ObjectParameter("UnitPrice", unitPrice) :
                new ObjectParameter("UnitPrice", typeof(decimal));
    
            var articleParameter = article != null ?
                new ObjectParameter("Article", article) :
                new ObjectParameter("Article", typeof(string));
    
            var uOMParameter = uOM != null ?
                new ObjectParameter("UOM", uOM) :
                new ObjectParameter("UOM", typeof(string));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(short));
    
            var discountParameter = discount.HasValue ?
                new ObjectParameter("Discount", discount) :
                new ObjectParameter("Discount", typeof(float));
    
            var totalAmountParameter = totalAmount.HasValue ?
                new ObjectParameter("TotalAmount", totalAmount) :
                new ObjectParameter("TotalAmount", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_SOD_Insert", salesOrderIDParameter, stockIDParameter, productIDParameter, unitPriceParameter, articleParameter, uOMParameter, quantityParameter, discountParameter, totalAmountParameter);
        }
    
        public virtual int usp_SOD_Update(Nullable<int> salesDetailsID, Nullable<int> salesOrderID, Nullable<int> stockID, Nullable<int> productID, Nullable<decimal> unitPrice, string article, string uOM, Nullable<short> quantity, Nullable<float> discount, Nullable<decimal> totalAmount)
        {
            var salesDetailsIDParameter = salesDetailsID.HasValue ?
                new ObjectParameter("SalesDetailsID", salesDetailsID) :
                new ObjectParameter("SalesDetailsID", typeof(int));
    
            var salesOrderIDParameter = salesOrderID.HasValue ?
                new ObjectParameter("SalesOrderID", salesOrderID) :
                new ObjectParameter("SalesOrderID", typeof(int));
    
            var stockIDParameter = stockID.HasValue ?
                new ObjectParameter("StockID", stockID) :
                new ObjectParameter("StockID", typeof(int));
    
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            var unitPriceParameter = unitPrice.HasValue ?
                new ObjectParameter("UnitPrice", unitPrice) :
                new ObjectParameter("UnitPrice", typeof(decimal));
    
            var articleParameter = article != null ?
                new ObjectParameter("Article", article) :
                new ObjectParameter("Article", typeof(string));
    
            var uOMParameter = uOM != null ?
                new ObjectParameter("UOM", uOM) :
                new ObjectParameter("UOM", typeof(string));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(short));
    
            var discountParameter = discount.HasValue ?
                new ObjectParameter("Discount", discount) :
                new ObjectParameter("Discount", typeof(float));
    
            var totalAmountParameter = totalAmount.HasValue ?
                new ObjectParameter("TotalAmount", totalAmount) :
                new ObjectParameter("TotalAmount", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_SOD_Update", salesDetailsIDParameter, salesOrderIDParameter, stockIDParameter, productIDParameter, unitPriceParameter, articleParameter, uOMParameter, quantityParameter, discountParameter, totalAmountParameter);
        }
    
        public virtual int usp_SOH_Delete(Nullable<int> salesOrderID)
        {
            var salesOrderIDParameter = salesOrderID.HasValue ?
                new ObjectParameter("SalesOrderID", salesOrderID) :
                new ObjectParameter("SalesOrderID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_SOH_Delete", salesOrderIDParameter);
        }
    
        public virtual ObjectResult<usp_SOH_GetBySID_Result> GetSOHtBySID(Nullable<int> salesOrderID)
        {
            var salesOrderIDParameter = salesOrderID.HasValue ?
                new ObjectParameter("SalesOrderID", salesOrderID) :
                new ObjectParameter("SalesOrderID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_SOH_GetBySID_Result>("GetSOHtBySID", salesOrderIDParameter);
        }
    
        public virtual int usp_SOH_Insert(string customer, string onlineOrderFlag, Nullable<decimal> subTotal, Nullable<decimal> taxAmt, Nullable<decimal> freight, string comment)
        {
            var customerParameter = customer != null ?
                new ObjectParameter("Customer", customer) :
                new ObjectParameter("Customer", typeof(string));
    
            var onlineOrderFlagParameter = onlineOrderFlag != null ?
                new ObjectParameter("OnlineOrderFlag", onlineOrderFlag) :
                new ObjectParameter("OnlineOrderFlag", typeof(string));
    
            var subTotalParameter = subTotal.HasValue ?
                new ObjectParameter("SubTotal", subTotal) :
                new ObjectParameter("SubTotal", typeof(decimal));
    
            var taxAmtParameter = taxAmt.HasValue ?
                new ObjectParameter("TaxAmt", taxAmt) :
                new ObjectParameter("TaxAmt", typeof(decimal));
    
            var freightParameter = freight.HasValue ?
                new ObjectParameter("Freight", freight) :
                new ObjectParameter("Freight", typeof(decimal));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_SOH_Insert", customerParameter, onlineOrderFlagParameter, subTotalParameter, taxAmtParameter, freightParameter, commentParameter);
        }
    
        public virtual int usp_SOH_Update(Nullable<int> salesOrderID, string customer, string onlineOrderFlag, Nullable<decimal> subTotal, Nullable<decimal> taxAmt, Nullable<decimal> freight, string comment, Nullable<bool> fulfilled)
        {
            var salesOrderIDParameter = salesOrderID.HasValue ?
                new ObjectParameter("SalesOrderID", salesOrderID) :
                new ObjectParameter("SalesOrderID", typeof(int));
    
            var customerParameter = customer != null ?
                new ObjectParameter("Customer", customer) :
                new ObjectParameter("Customer", typeof(string));
    
            var onlineOrderFlagParameter = onlineOrderFlag != null ?
                new ObjectParameter("OnlineOrderFlag", onlineOrderFlag) :
                new ObjectParameter("OnlineOrderFlag", typeof(string));
    
            var subTotalParameter = subTotal.HasValue ?
                new ObjectParameter("SubTotal", subTotal) :
                new ObjectParameter("SubTotal", typeof(decimal));
    
            var taxAmtParameter = taxAmt.HasValue ?
                new ObjectParameter("TaxAmt", taxAmt) :
                new ObjectParameter("TaxAmt", typeof(decimal));
    
            var freightParameter = freight.HasValue ?
                new ObjectParameter("Freight", freight) :
                new ObjectParameter("Freight", typeof(decimal));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            var fulfilledParameter = fulfilled.HasValue ?
                new ObjectParameter("Fulfilled", fulfilled) :
                new ObjectParameter("Fulfilled", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_SOH_Update", salesOrderIDParameter, customerParameter, onlineOrderFlagParameter, subTotalParameter, taxAmtParameter, freightParameter, commentParameter, fulfilledParameter);
        }
    }
}
